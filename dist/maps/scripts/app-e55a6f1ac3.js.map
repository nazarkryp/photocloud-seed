{"version":3,"sources":["app/app.module.js","app/services/infrastructure/http/interceptors/http.interceptor.js","app/components/layout/widgets/search/search.service.js","app/components/layout/widgets/search/search-bar.controller.js","app/components/layout/widgets/search/search-bar.component.js","app/components/layout/widgets/userbar/user-bar.controller.js","app/components/layout/widgets/userbar/user-bar.component.js","app/services/infrastructure/session/session.js","app/services/infrastructure/session/authentication.service.js","app/services/infrastructure/providers/user.provider.js","app/services/infrastructure/providers/token.provider.js","app/services/infrastructure/http/http.service.js","app/components/posts/user-posts/user-posts.controller.js","app/components/posts/services/post.service.js","app/components/posts/post-details/post-details.controller.js","app/components/posts/post/post.controller.js","app/components/posts/post/post.component.js","app/components/posts/feed/feed.controller.js","app/components/posts/errors/error-box.controller.js","app/components/posts/errors/error-box.component.js","app/components/posts/create/create-post.controller.js","app/components/posts/comments/comments.controller.js","app/components/posts/comments/comments.component.js","app/components/posts/comments/comment.service.js","app/components/account/create/create-account.route.js","app/components/account/create/create-account.controller.js","app/components/account/signin/signin.route.js","app/components/account/signin/signin.controller.js","app/core/core.module.js","app/core/services/clipboard.service.js","app/core/router/router.module.js","app/core/router/router-helper.provider.js","app/core/logger/logger.module.js","app/core/logger/logger.js","app/components/users/user.service.js","app/components/settings/settings.route.js","app/components/settings/settings.controller.js","app/components/posts/posts.route.js","app/components/layout/index.controller.js","app/components/account/account.service.js","app/components/404/404.route.js","app/services/attachment.service.js","app/filters/date.filter.js","app/filters/caption.filter.js","app/directives/compare-to.directive.js","app/directives/alternative-user-image.directive.js","app/core/core.environment.js","app/core/core.config.js","app/core/app.version.js","app/app.run.js","app/app.routes.js","templateCacheHtml.js"],"names":["angular","module","httpInterceptor","$q","tokenProvider","request","config","accessToken","getAccessToken","headers","Authorization","access_token","requestError","rejection","reject","response","responseError","factory","$inject","searchBarService","httpService","this","search","query","deferred","defer","get","promise","service","SearchBarController","$state","vm","noCache","selectedItem","searchQuery","then","resolve","data","selectedItemChange","go","username","controller","component","controllerAs","templateUrl","UserBarController","$scope","userProvider","$watch","currentUser","logout","sessionStorage","$cookies","self","key","save","session","json","toJson","put","fromJson","clean","remove","authenticationService","signIn","password","post","refreshToken","getUserFromSession","user","now","Date","tokenExpirationDate","expiresIn","isAuthenticated","updateCurrentUser","properties","property","update","value","setCurrentUser","userId","parseInt","isActive","isPrivate","userName","tokenExpirationData","useRefreshToken","refresh_token","isValid","$http","environment","url","onSuccess","onError","error","requestUri","postEmpty","patch","delete","UserPostsController","$stateParams","postService","userService","getUser","id","outgoingStatus","getPosts","title","details","status","pagination","next","previous","posts","hasMoreItems","isLoading","getUserPosts","concat","$onInit","loaded","pageFilter","getPostById","postId","getPostByTag","tag","createPost","likePost","dislikePost","PostDetailsController","attachments","length","activeAttachment","count","PostController","commentService","clipboard","logger","share","pathArray","location","href","split","protocol","host","link","setText","toast","like","userHasLiked","likesCount","getComments","comments","bindings","removeCallback","FeedController","$mdDialog","onPostCreated","unshift","onPostCreateError","event","show","parent","element","document","body","targetEvent","clickOutsideToClose","removePost","index","splice","isPageLoading","PostErrorController","CreatePostController","$upload","attachmentIds","caption","success","setPreview","attachment","preview","uri","upload","isUploading","file","progress","e","Math","round","total","push","map","hide","CommentsController","removeComment","comment","createComment","commentId","editComment","appRun","routerHelper","configureStates","getStates","state","run","CreateAccountController","accountService","validateUserInput","account","confirmPassword","onAccountCreateSuccess","onAccountCreateError","errorResponse","errors","modelState","create","SignInController","onAuthorizationSuccess","message","onAuthenticationError","$window","textarea","css","position","opacity","toCopy","val","append","select","successful","execCommand","err","prompt","routerHelperProvider","$locationProvider","$stateProvider","$urlRouterProvider","RouterHelper","$location","$rootScope","states","otherwisePath","forEach","extend","resolveAlways","hasOtherwise","otherwise","handleRoutingErrors","$on","toState","toParams","fromState","fromParams","handlingStateChangeError","stateCounts","name","loadedTemplateUrl","path","updateDocTitle","changes","docTitle","undefined","window","history","pushState","hash","configure","cfg","$get","provider","$log","$mdToast","info","warning","warn","simple","textContent","hideDelay","toastContainer","getElementById","showToasts","log","SettingsController","changePassword","oldPassword","newPassword","updateProfilePicture","pictureId","updateAccount","pictureUri","updateProfile","fullName","bio","email","changeAccountPrivacy","invertAccountStatus","getAccount","IndexController","date","attachmentService","$filter","postDate","currentDate","parsed","parse","elapsed","getTime","difference","msPerMinute","msPerHour","msPerDay","filter","$sce","text","target","type","includes","replace","trustAsHtml","compareTo","require","scope","otherModelValue","attributes","ngModel","$validators","modelValue","$validate","directive","alternativeUserImage","restrict","attrs","$observe","ngSrc","attr","$logProvider","debugEnabled","constant","stateChangeStart","preventDefault","isRedirected","configRoutes","$httpProvider","$mdThemingProvider","theme","primaryPalette","interceptors","$templateCache"],"mappings":"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","file":"../../scripts/app-e55a6f1ac3.js","sourcesContent":["(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud', [\r\n        'app.core',\r\n        'app.logger',\r\n        'app.router',\r\n        'ngMaterial',\r\n        'ngMessages',\r\n        'ngSanitize',\r\n        'ngFileUpload',\r\n        'ngCookies'\r\n    ]);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .factory('httpInterceptor', httpInterceptor);\r\n\r\n    httpInterceptor.$inject = ['$q', 'tokenProvider'];\r\n\r\n    function httpInterceptor($q, tokenProvider) {\r\n        return {\r\n            request: function (config) {\r\n                var accessToken = tokenProvider.getAccessToken();\r\n\r\n                if (accessToken) {\r\n                    config.headers.Authorization = 'Bearer ' + accessToken.access_token;\r\n                }\r\n\r\n                return config;\r\n            },\r\n            requestError: function (rejection) {\r\n                return $q.reject(rejection);\r\n            },\r\n            response: function (response) {\r\n                return response;\r\n            },\r\n            responseError: function (rejection) {\r\n                return $q.reject(rejection);\r\n            }\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('searchBarService', searchBarService);\r\n\r\n    searchBarService.$inject = ['$q', 'httpService'];\r\n\r\n    function searchBarService($q, httpService) {\r\n        this.search = function (query) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.get('users/search?query=' + query, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('SearchBarController', SearchBarController);\r\n\r\n    SearchBarController.$inject = ['$state', '$q', 'searchBarService'];\r\n\r\n    function SearchBarController($state, $q, searchBarService) {\r\n        var vm = this;\r\n\r\n        vm.noCache = false;\r\n        vm.selectedItem = null;\r\n        vm.query = null;\r\n\r\n        vm.search = function (searchQuery) {\r\n            var deferred = $q.defer();\r\n\r\n            if (searchQuery) {\r\n                searchBarService.search(searchQuery)\r\n                    .then(function (response) {\r\n                        deferred.resolve(response.data);\r\n                    });\r\n            } else {\r\n                deferred.resolve([]);\r\n            }\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        vm.selectedItemChange = function (selectedItem) {\r\n            if (selectedItem) {\r\n                $state.go('userposts', {username: selectedItem.username});\r\n                selectedItem = null;\r\n            }\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .component('searchBar', {\r\n            controller: 'SearchBarController',\r\n            controllerAs: 'vm',\r\n            templateUrl: 'app/components/layout/widgets/search/search.template.html'\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('UserBarController', UserBarController);\r\n\r\n    UserBarController.$inject = ['$scope', '$state', 'userProvider'];\r\n\r\n    function UserBarController($scope, $state, userProvider) {\r\n        var vm = this;\r\n\r\n        vm.userProvider = userProvider;\r\n\r\n        $scope.$watch('vm.userProvider.currentUser', function (currentUser) {\r\n            vm.currentUser = currentUser;\r\n        });\r\n\r\n        vm.logout = function () {\r\n            userProvider.logout();\r\n            $state.go('signin');\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .component('userBar', {\r\n            controller: 'UserBarController',\r\n            controllerAs: 'vm',\r\n            templateUrl: 'app/components/layout/widgets/userbar/user-bar.template.html'\r\n        });\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .factory('sessionStorage', sessionStorage);\r\n\r\n    sessionStorage.$inject = ['$cookies'];\r\n\r\n    function sessionStorage($cookies) {\r\n        var self = {};\r\n\r\n        self.key = 'session';\r\n\r\n        self.save = function (session) {\r\n            var json = angular.toJson(session);\r\n\r\n            $cookies.put(self.key, json);\r\n        };\r\n\r\n        self.get = function () {\r\n            var json = $cookies.get(self.key);\r\n\r\n            return angular.fromJson(json);\r\n        };\r\n\r\n        self.clean = function () {\r\n            $cookies.remove(self.key);\r\n        };\r\n\r\n        return {\r\n            save: self.save,\r\n            get: self.get,\r\n            clean: self.clean\r\n        };\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('authenticationService', authenticationService);\r\n\r\n    authenticationService.$inject = ['$q', 'httpService'];\r\n\r\n    function authenticationService($q, httpService) {\r\n        this.signIn = function (username, password) {\r\n            var deferred = $q.defer();\r\n\r\n            var data = 'grant_type=password&username=' + username + '&password=' + password;\r\n            httpService.post('authorize', data, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.refreshToken = function (refreshToken) {\r\n            var deferred = $q.defer();\r\n\r\n            var data = 'grant_type=refresh_token&refresh_token=' + refreshToken;\r\n            httpService.post('authorize', data, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('userProvider', userProvider);\r\n\r\n    userProvider.$inject = ['sessionStorage'];\r\n\r\n    function userProvider(sessionStorage) {\r\n        var self = this;\r\n\r\n        self.updateCurrentUser = function (properties) {\r\n            var session = sessionStorage.get();\r\n\r\n            for (var property in properties) {\r\n                session[property] = properties[property];\r\n                self.currentUser[property] = properties[property];\r\n            }\r\n\r\n            sessionStorage.save(session);\r\n        };\r\n\r\n        self.update = function (key, value) {\r\n            var session = sessionStorage.get();\r\n\r\n            session[key] = value;\r\n            self.currentUser[key] = value;\r\n\r\n            sessionStorage.save(session);\r\n        };\r\n\r\n        self.setCurrentUser = function (session) {\r\n            session.userId = parseInt(session.userId, 10);\r\n            session.isActive = session.isActive === 'true';\r\n            session.isPrivate = session.isPrivate === 'true';\r\n            session.username = session.userName;\r\n\r\n            sessionStorage.save(session);\r\n\r\n            self.currentUser = getUserFromSession();\r\n        };\r\n\r\n        self.logout = function () {\r\n            sessionStorage.clean();\r\n\r\n            self.currentUser = getUserFromSession();\r\n        };\r\n\r\n        self.currentUser = getUserFromSession();\r\n\r\n        function getUserFromSession() {\r\n            var user = sessionStorage.get();\r\n\r\n            if (user) {\r\n                var now = new Date();\r\n                var tokenExpirationDate = new Date(user['.expires']);\r\n                var expiresIn = (tokenExpirationDate - now) / 1000 / 60;\r\n                user.isAuthenticated = expiresIn > 0;\r\n            } else {\r\n                user = {\r\n                    isAuthenticated: false\r\n                };\r\n            }\r\n\r\n            return user;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('tokenProvider', tokenProvider);\r\n\r\n    tokenProvider.$inject = ['sessionStorage'];\r\n\r\n    function tokenProvider(sessionStorage) {\r\n        var refreshTimeout = 5;\r\n\r\n        this.getAccessToken = function () {\r\n            var accessToken = sessionStorage.get();\r\n\r\n            if (accessToken) {\r\n                var tokenExpirationData = new Date(accessToken['.expires']);\r\n                var now = new Date();\r\n                var expiresIn = (tokenExpirationData - now) / 1000 / 60;\r\n                var useRefreshToken = accessToken.refresh_token && expiresIn <= refreshTimeout;\r\n\r\n                accessToken.useRefreshToken = useRefreshToken;\r\n                accessToken.isValid = expiresIn > 0;\r\n\r\n                if (!accessToken.isValid) {\r\n                    sessionStorage.clean();\r\n                }\r\n            }\r\n\r\n            return accessToken;\r\n        };\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('httpService', httpService);\r\n\r\n    httpService.$inject = ['$http', 'environment'];\r\n\r\n    function httpService($http, environment) {\r\n        this.get = function (url, deferred) {\r\n            $http.get(environment.requestUri + url)\r\n                .then(onSuccess, onError);\r\n\r\n            function onSuccess(response) {\r\n                deferred.resolve(response.data);\r\n            }\r\n\r\n            function onError(error) {\r\n                deferred.reject(error);\r\n            }\r\n        };\r\n\r\n        this.post = function (url, data, deferred) {\r\n            $http.post(environment.requestUri + url, data)\r\n                .then(onSuccess, onError);\r\n\r\n            function onSuccess(response) {\r\n                deferred.resolve(response.data);\r\n            }\r\n\r\n            function onError(error) {\r\n                deferred.reject(error);\r\n            }\r\n        };\r\n\r\n        this.postEmpty = function (url, deferred) {\r\n            $http.post(environment.requestUri + url)\r\n                .then(onSuccess, onError);\r\n\r\n            function onSuccess(response) {\r\n                deferred.resolve(response.data);\r\n            }\r\n\r\n            function onError(error) {\r\n                deferred.reject(error);\r\n            }\r\n        };\r\n\r\n        this.put = function (url, data, deferred) {\r\n            $http.put(environment.requestUri + url, data)\r\n                .then(onSuccess, onError);\r\n\r\n            function onSuccess(response) {\r\n                deferred.resolve(response.data);\r\n            }\r\n\r\n            function onError(error) {\r\n                deferred.reject(error);\r\n            }\r\n        };\r\n\r\n        this.patch = function (url, data, deferred) {\r\n            $http.patch(environment.requestUri + url, data)\r\n                .then(onSuccess, onError);\r\n\r\n            function onSuccess(response) {\r\n                deferred.resolve(response.data);\r\n            }\r\n\r\n            function onError(error) {\r\n                deferred.reject(error);\r\n            }\r\n        };\r\n\r\n        this.delete = function (url, deferred) {\r\n            $http.delete(environment.requestUri + url)\r\n                .then(onSuccess, onError);\r\n\r\n            function onSuccess(response) {\r\n                deferred.resolve(response.data);\r\n            }\r\n\r\n            function onError(error) {\r\n                deferred.reject(error);\r\n            }\r\n        };\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('UserPostsController', UserPostsController);\r\n\r\n    UserPostsController.$inject = ['$state', '$stateParams', 'postService', 'userService', 'userProvider'];\r\n\r\n    function UserPostsController($state, $stateParams, postService, userService, userProvider) {\r\n        var vm = this;\r\n\r\n        vm.data = {\r\n            pagination: {\r\n                next: null,\r\n                previous: null\r\n            },\r\n            posts: [],\r\n            hasMoreItems: false\r\n        };\r\n\r\n        vm.getPosts = function () {\r\n            vm.isLoading = true;\r\n\r\n            postService.getUserPosts($stateParams.username, vm.data.pagination)\r\n                .then(function (response) {\r\n                    if (response.data) {\r\n                        vm.data.posts = vm.data.posts.concat(response.data);\r\n                    }\r\n\r\n                    vm.data.pagination = response.pagination;\r\n                    vm.data.hasMoreItems = response.hasMoreItems;\r\n                    vm.isLoading = false;\r\n                }, function () {\r\n                    vm.isLoading = false;\r\n                });\r\n        };\r\n\r\n        function getUser(username) {\r\n            return userService.getUser(username)\r\n                .then(function (response) {\r\n                    vm.user = response;\r\n\r\n                    if (vm.user.id === vm.currentUser.userId || !vm.user.isPrivate || (vm.user.isPrivate && vm.user.outgoingStatus === 'Following')) {\r\n                        vm.getPosts();\r\n                    } else if (vm.user.outgoingStatus === 'Requested') {\r\n                        vm.error = {\r\n                            title: 'This account is private',\r\n                            details: 'Please wait until ' + vm.user.username + ' accepts your request'\r\n                        };\r\n                    } else {\r\n                        vm.error = {\r\n                            title: 'This account is private'\r\n                        };\r\n\r\n                        if (userProvider.currentUser.isAuthenticated) {\r\n                            vm.error.details = 'Follow ' + vm.user.username + ' to see all their photos.';\r\n                        } else {\r\n                            vm.error.details = 'Already follow ' + vm.user.username + '? Log in to see their photos and videos.';\r\n                        }\r\n                    }\r\n                }, function (error) {\r\n                    if (error.status === 403) {\r\n                        vm.error = {\r\n                            title: 'Account has been deactivated'\r\n                        };\r\n                    } else if (error.status === 404) {\r\n                        $state.go('404');\r\n                    }\r\n                });\r\n        }\r\n\r\n        vm.logout = function () {\r\n            userProvider.logout();\r\n            $state.go('signin');\r\n        };\r\n\r\n        vm.$onInit = function () {\r\n            vm.currentUser = userProvider.currentUser;\r\n            vm.user = {\r\n                username: $stateParams.username\r\n            };\r\n\r\n            getUser($stateParams.username)\r\n                .then(function () {\r\n                    vm.loaded = true;\r\n                });\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('postService', postService);\r\n\r\n    postService.$inject = ['$q', 'httpService'];\r\n\r\n    function postService($q, httpService) {\r\n        this.getPosts = function (pageFilter) {\r\n            var deferred = $q.defer();\r\n\r\n            var requestUri = 'posts';\r\n\r\n            if (pageFilter && pageFilter.next) {\r\n                requestUri = requestUri + '?next=' + pageFilter.next;\r\n            }\r\n\r\n            httpService.get(requestUri, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.getPostById = function (postId) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.get('posts/' + postId, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.getPostByTag = function (tag) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.get('posts/tags/' + tag, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.getUserPosts = function (username, pageFilter) {\r\n            var deferred = $q.defer();\r\n\r\n            var requestUri = 'posts/' + username;\r\n\r\n            if (pageFilter && pageFilter.next) {\r\n                requestUri = requestUri + '?next=' + pageFilter.next;\r\n            }\r\n\r\n            httpService.get(requestUri, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.createPost = function (post) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.post('posts', post, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.remove = function (postId) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.delete('posts/' + postId, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.likePost = function (postId) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.postEmpty('posts/' + postId + '/likes', deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.dislikePost = function (postId) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.delete('posts/' + postId + '/likes', deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('PostDetailsController', PostDetailsController);\r\n\r\n    PostDetailsController.$inject = ['$state', '$stateParams', 'postService'];\r\n\r\n    function PostDetailsController($state, $stateParams, postService) {\r\n        var vm = this;\r\n\r\n        vm.post = {};\r\n\r\n        vm.next = function () {\r\n            var count = vm.post.attachments.length;\r\n\r\n            if (count > 1 && vm.post.activeAttachment !== count - 1) {\r\n                vm.post.activeAttachment++;\r\n            }\r\n        };\r\n\r\n        vm.previous = function () {\r\n            var count = vm.post.attachments.length;\r\n\r\n            if (count > 1 && vm.post.activeAttachment !== 0) {\r\n                vm.post.activeAttachment--;\r\n            }\r\n        };\r\n\r\n        function onSuccess(response) {\r\n            vm.post = response;\r\n\r\n            if (vm.post && vm.post.attachments.length > 0) {\r\n                vm.post.activeAttachment = 0;\r\n            }\r\n        }\r\n\r\n        function onError(error) {\r\n            if (error.status === 404) {\r\n                $state.go('404');\r\n            }\r\n        }\r\n\r\n        vm.$onInit = function () {\r\n            postService.getPostById($stateParams.postId)\r\n                .then(onSuccess, onError);\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('PostController', PostController);\r\n\r\n    PostController.$inject = ['$state', '$stateParams', 'userProvider', 'postService', 'commentService', 'clipboard', 'logger'];\r\n\r\n    function PostController($state, $stateParams, userProvider, postService, commentService, clipboard, logger) {\r\n        var vm = this;\r\n\r\n        vm.next = function () {\r\n            var count = vm.post.attachments.length;\r\n\r\n            if (count > 1 && vm.post.activeAttachment !== count - 1) {\r\n                vm.post.activeAttachment++;\r\n            }\r\n        };\r\n\r\n        vm.previous = function () {\r\n            var count = vm.post.attachments.length;\r\n\r\n            if (count > 1 && vm.post.activeAttachment !== 0) {\r\n                vm.post.activeAttachment--;\r\n            }\r\n        };\r\n\r\n        vm.share = function () {\r\n            var pathArray = location.href.split('/');\r\n            var protocol = pathArray[0];\r\n            var host = pathArray[2];\r\n\r\n            var link = protocol + '//' + host + '/#!/p/' + vm.post.id;\r\n\r\n            clipboard.setText(link);\r\n\r\n            logger.toast('Copied to clipboard');\r\n        };\r\n\r\n        vm.like = function () {\r\n            if (vm.post.userHasLiked) {\r\n                vm.post.likesCount--;\r\n                vm.post.userHasLiked = !vm.post.userHasLiked;\r\n\r\n                postService.dislikePost(vm.post.id)\r\n                    .then(function () {}, function () {\r\n                        vm.post.userHasLiked = !vm.post.userHasLiked;\r\n                        vm.post.likesCount++;\r\n                    });\r\n            } else {\r\n                vm.post.likesCount++;\r\n                vm.post.userHasLiked = !vm.post.userHasLiked;\r\n\r\n                postService.likePost(vm.post.id)\r\n                    .then(function () {}, function () {\r\n                        vm.post.userHasLiked = !vm.post.userHasLiked;\r\n                        vm.post.likesCount--;\r\n                    });\r\n            }\r\n        };\r\n\r\n        vm.getComments = function () {\r\n            commentService.getComments(vm.postId)\r\n                .then(function (response) {\r\n                    vm.post.comments = response;\r\n                }, function (error) {\r\n                    logger.toast('Error during loading comments');\r\n                });\r\n        };\r\n\r\n        vm.$onInit = function () {\r\n            if (vm.post && vm.post.attachments.length > 0) {\r\n                vm.post.activeAttachment = 0;\r\n            }\r\n\r\n            vm.currentUser = userProvider.currentUser;\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .component('post', {\r\n            controller: 'PostController',\r\n            controllerAs: 'vm',\r\n            templateUrl: 'app/components/posts/post/post.template.html',\r\n            bindings: {\r\n                post: '=',\r\n                removeCallback: '&'\r\n            }\r\n        });\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('FeedController', FeedController);\r\n\r\n    FeedController.$inject = ['postService', '$mdDialog'];\r\n\r\n    function FeedController(postService, $mdDialog) {\r\n        var vm = this;\r\n\r\n        vm.isLoading = false;\r\n\r\n        vm.data = {\r\n            pagination: {\r\n                next: null,\r\n                previous: null\r\n            },\r\n            posts: [],\r\n            hasMoreItems: false\r\n        };\r\n\r\n        vm.createPost = function (event) {\r\n            $mdDialog.show({\r\n                controller: 'CreatePostController',\r\n                controllerAs: 'vm',\r\n                templateUrl: 'app/components/posts/create/create-post.template.html',\r\n                parent: angular.element(document.body),\r\n                targetEvent: event,\r\n                clickOutsideToClose: true\r\n            }).then(onPostCreated, onPostCreateError);\r\n        };\r\n\r\n        function onPostCreated(post) {\r\n            if (!vm.data.posts) {\r\n                vm.data.posts = [];\r\n            }\r\n\r\n            vm.data.posts.unshift(post);\r\n        }\r\n\r\n        function onPostCreateError() {}\r\n\r\n        vm.removePost = function (index) {\r\n            var post = vm.data.posts[index];\r\n\r\n            if (post.id) {\r\n                vm.data.posts.splice(index, 1);\r\n\r\n                postService.remove(post.id).then(\r\n                    function (response) {},\r\n                    function (error) {});\r\n            }\r\n        };\r\n\r\n        vm.getPosts = function () {\r\n            vm.isLoading = true;\r\n\r\n            postService.getPosts(vm.data.pagination)\r\n                .then(function (response) {\r\n                    if (response.data) {\r\n                        vm.data.posts = vm.data.posts.concat(response.data);\r\n                    }\r\n\r\n                    vm.data.pagination = response.pagination;\r\n                    vm.data.hasMoreItems = response.hasMoreItems;\r\n                    vm.isLoading = false;\r\n                    vm.isPageLoading = false;\r\n                }, function (error) {\r\n                    vm.isPageLoading = false;\r\n                    vm.isLoading = false;\r\n                });\r\n        };\r\n\r\n        vm.$onInit = function () {\r\n            vm.getPosts();\r\n            vm.isPageLoading = true;\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('ErrorBoxController', PostErrorController);\r\n\r\n    function PostErrorController() {\r\n\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .component('errorBox', {\r\n            controller: 'ErrorBoxController',\r\n            controllerAs: 'vm',\r\n            templateUrl: 'app/components/posts/errors/error-box.template.html',\r\n            bindings: {\r\n                error: '='\r\n            }\r\n        });\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('CreatePostController', CreatePostController);\r\n\r\n    CreatePostController.$inject = ['Upload', 'environment', 'postService', '$mdDialog'];\r\n\r\n    function CreatePostController($upload, environment, postService, $mdDialog) {\r\n        var vm = this;\r\n\r\n        vm.post = {\r\n            attachments: [],\r\n            attachmentIds: [],\r\n            caption: '',\r\n            success: false\r\n        };\r\n\r\n        vm.setPreview = function (attachment) {\r\n            vm.post.preview = attachment.uri;\r\n        };\r\n\r\n        vm.upload = function (attachment) {\r\n            vm.isUploading = true;\r\n\r\n            var upload = {\r\n                url: environment.requestUri + 'attachments',\r\n                data: {\r\n                    file: attachment\r\n                }\r\n            };\r\n\r\n            $upload.upload(upload)\r\n                .progress(function (e) {\r\n                    vm.upload.progress = Math.round((e.loaded * 100.0) / e.total);\r\n                })\r\n                .success(function (data, status, headers, config) {\r\n                    vm.isUploading = false;\r\n\r\n                    vm.post.attachments.push(data);\r\n\r\n                    if (vm.post.attachments.length === 1) {\r\n                        vm.post.preview = data.uri;\r\n                    }\r\n\r\n                    vm.post.attachmentIds = vm.post.attachments.map(function (attachment) {\r\n                        return attachment.id;\r\n                    });\r\n                })\r\n                .error(function (data, status, headers, config) {\r\n                    vm.isUploading = false;\r\n                });\r\n        };\r\n\r\n        vm.createPost = function () {\r\n            postService.createPost(vm.post)\r\n                .then(function (response) {\r\n                    $mdDialog.hide(response);\r\n                });\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('CommentsController', CommentsController);\r\n\r\n    CommentsController.$inject = ['commentService'];\r\n\r\n    function CommentsController(commentService) {\r\n        var vm = this;\r\n\r\n        vm.removeComment = function (index) {\r\n            var comment = vm.post.comments[index];\r\n\r\n            commentService.removeComment(comment.id)\r\n                .then(function (response) {\r\n                    vm.post.comments.splice(index, 1);\r\n                }, function (error) {});\r\n        };\r\n\r\n        vm.getComments = function () {\r\n            commentService.getComments(vm.post.id)\r\n                .then(onSuccess, onError);\r\n        };\r\n\r\n        function onSuccess(comments) {\r\n            vm.post.comments = comments;\r\n        }\r\n\r\n        function onError(error) {}\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .component('comments', {\r\n            controller: 'CommentsController',\r\n            controllerAs: 'vm',\r\n            templateUrl: 'app/components/posts/comments/comments.template.html',\r\n            bindings: {\r\n                post: '='\r\n            }\r\n        });\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('commentService', commentService);\r\n\r\n    commentService.$inject = ['$q', 'httpService'];\r\n\r\n    function commentService($q, httpService) {\r\n        this.getComments = function (postId) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.get('posts/' + postId + '/comments', deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.createComment = function (postId, comment) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.post('posts/' + postId + '/comments', comment, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.removeComment = function (commentId) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.delete('posts/comments/' + commentId, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.editComment = function (commentId, comment) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.put('posts/comments/' + commentId, comment, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .run(appRun);\r\n\r\n    appRun.$inject = ['routerHelper'];\r\n\r\n    function appRun(routerHelper) {\r\n        routerHelper.configureStates(getStates());\r\n    }\r\n\r\n    function getStates() {\r\n        return [{\r\n            state: 'signup',\r\n            config: {\r\n                url: '/account/create',\r\n                templateUrl: 'app/components/account/create/create-account.template.html',\r\n                controller: 'CreateAccountController',\r\n                controllerAs: 'vm',\r\n                title: 'Create Account'\r\n            }\r\n        }];\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('CreateAccountController', CreateAccountController);\r\n\r\n    CreateAccountController.$inject = ['$state', 'accountService', 'logger'];\r\n\r\n    function CreateAccountController($state, accountService, logger) {\r\n        var vm = this;\r\n\r\n        vm.create = function (account) {\r\n            vm.isLoading = true;\r\n            vm.errors = [];\r\n\r\n            var validationResult = validateUserInput(account);\r\n\r\n            if (!validationResult) {\r\n                return;\r\n            }\r\n\r\n            accountService.create(account)\r\n                .then(onAccountCreateSuccess, onAccountCreateError);\r\n        };\r\n\r\n        function validateUserInput(account) {\r\n            if (!account.username) {\r\n                return false;\r\n            }\r\n\r\n            if (!account.password || !account.confirmPassword || account.password !== account.confirmPassword) {\r\n                return false;\r\n            }\r\n\r\n            return true;\r\n        }\r\n\r\n        function onAccountCreateSuccess() {\r\n            vm.isLoading = false;\r\n\r\n            logger.toast('Account has been created. Now you can sign in using your username and password');\r\n\r\n            $state.go('signin');\r\n        }\r\n\r\n        function onAccountCreateError(errorResponse) {\r\n            vm.isLoading = false;\r\n\r\n            vm.errors = errorResponse.data.error.modelState;\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .run(appRun);\r\n\r\n    appRun.$inject = ['routerHelper'];\r\n\r\n    function appRun(routerHelper) {\r\n        routerHelper.configureStates(getStates());\r\n    }\r\n\r\n    function getStates() {\r\n        return [{\r\n            state: 'signin',\r\n            config: {\r\n                url: '/signin',\r\n                templateUrl: 'app/components/account/signin/signin.template.html',\r\n                controller: 'SignInController',\r\n                controllerAs: 'vm',\r\n                title: 'Sign In'\r\n            }\r\n        }];\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('SignInController', SignInController);\r\n\r\n    SignInController.$inject = ['$state', 'accountService', 'userProvider', 'logger'];\r\n\r\n    function SignInController($state, accountService, userProvider, logger) {\r\n        var vm = this;\r\n\r\n        vm.isLoading = false;\r\n        vm.error = null;\r\n\r\n        vm.signIn = function (account) {\r\n            vm.isLoading = true;\r\n            vm.error = null;\r\n            accountService.signIn(account)\r\n                .then(onAuthorizationSuccess, onAuthenticationError);\r\n        };\r\n\r\n        function onAuthorizationSuccess(response) {\r\n            vm.isLoading = false;\r\n\r\n            userProvider.setCurrentUser(response);\r\n\r\n            var message = 'Logged in as ' + response.username;\r\n            logger.toast(message);\r\n\r\n            $state.go('posts');\r\n        }\r\n\r\n        function onAuthenticationError(error) {\r\n            vm.isLoading = false;\r\n\r\n            vm.error = error.data.error;\r\n            logger.toast(error.data.error);\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app.core', ['app.router']);\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app.core')\r\n        .service('clipboard', clipboard);\r\n\r\n    clipboard.$inject = ['$window'];\r\n\r\n    function clipboard($window) {\r\n        var body = angular.element($window.document.body);\r\n\r\n        var textarea = angular.element('<textarea/>');\r\n\r\n        textarea.css({\r\n            position: 'fixed',\r\n            opacity: '0'\r\n        });\r\n\r\n        this.setText = function (toCopy) {\r\n            textarea.val(toCopy);\r\n            body.append(textarea);\r\n            textarea[0].select();\r\n\r\n            try {\r\n                var successful = document.execCommand('copy');\r\n\r\n                if (!successful) {\r\n                    throw successful;\r\n                }\r\n            } catch (err) {\r\n                $window.prompt('Copy to clipboard: Ctrl+C, Enter', toCopy);\r\n            }\r\n\r\n            textarea.remove();\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app.router', ['ui.router']);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app.router')\r\n        .provider('routerHelper', routerHelperProvider);\r\n\r\n    routerHelperProvider.$inject = ['$locationProvider', '$stateProvider', '$urlRouterProvider'];\r\n    /* @ngInject */\r\n    function routerHelperProvider($locationProvider, $stateProvider, $urlRouterProvider) {\r\n        /* jshint validthis:true */\r\n        var config = {\r\n            docTitle: undefined,\r\n            resolveAlways: {}\r\n        };\r\n\r\n        if (!(window.history && window.history.pushState)) {\r\n            window.location.hash = '/';\r\n        }\r\n\r\n        // $locationProvider.html5Mode(true);\r\n\r\n        this.configure = function (cfg) {\r\n            angular.extend(config, cfg);\r\n        };\r\n\r\n        this.$get = RouterHelper;\r\n        RouterHelper.$inject = ['$location', '$rootScope', '$state'];\r\n\r\n        /* @ngInject */\r\n        function RouterHelper($location, $rootScope, $state) {\r\n            var handlingStateChangeError = false;\r\n            var hasOtherwise = false;\r\n            var stateCounts = {\r\n                errors: 0,\r\n                changes: 0\r\n            };\r\n\r\n            var service = {\r\n                configureStates: configureStates,\r\n                getStates: getStates,\r\n                stateCounts: stateCounts\r\n            };\r\n\r\n            init();\r\n\r\n            return service;\r\n\r\n            function configureStates(states, otherwisePath) {\r\n                states.forEach(function (state) {\r\n                    state.config.resolve = angular.extend(state.config.resolve || {}, config.resolveAlways);\r\n                    $stateProvider.state(state.state, state.config);\r\n                });\r\n\r\n                if (otherwisePath && !hasOtherwise) {\r\n                    hasOtherwise = true;\r\n                    $urlRouterProvider.otherwise(otherwisePath);\r\n                }\r\n            }\r\n\r\n            function handleRoutingErrors() {\r\n                $rootScope.$on('$stateChangeError',\r\n                    function (event, toState, toParams, fromState, fromParams, error) {\r\n                        if (handlingStateChangeError) {\r\n                            return;\r\n                        }\r\n\r\n                        stateCounts.errors++;\r\n                        handlingStateChangeError = true;\r\n                        var destination = (toState && (toState.title || toState.name || toState.loadedTemplateUrl)) || 'unknown target';\r\n                        $location.path('/');\r\n                    }\r\n                );\r\n            }\r\n\r\n            function init() {\r\n                handleRoutingErrors();\r\n                updateDocTitle();\r\n            }\r\n\r\n            function getStates() {\r\n                return $state.get();\r\n            }\r\n\r\n            function updateDocTitle() {\r\n                $rootScope.$on('$stateChangeSuccess',\r\n                    function (event, toState, toParams, fromState, fromParams) {\r\n                        stateCounts.changes++;\r\n                        handlingStateChangeError = false;\r\n                        var title = config.docTitle + ' ' + (toState.title || '');\r\n                        $rootScope.title = title;\r\n                    }\r\n                );\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app.logger', ['ngMaterial']);\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    'use strict';\r\n\r\n    angular.module('app.logger')\r\n        .factory('logger', logger);\r\n\r\n    logger.$inject = ['$log', '$mdToast'];\r\n\r\n    /* @ngInject */\r\n    function logger($log, $mdToast) {\r\n        var service = {\r\n            showToasts: true,\r\n\r\n            error: error,\r\n            info: info,\r\n            success: success,\r\n            warning: warning,\r\n            toast: show,\r\n            log: $log.log\r\n        };\r\n\r\n        return service;\r\n\r\n        function error(message, data, title) {\r\n            show(message);\r\n            $log.error('Error: ' + message, data);\r\n        }\r\n\r\n        function info(message, data, title) {\r\n            show(message);\r\n            $log.info('info: ' + message, data);\r\n        }\r\n\r\n        function success(message, data, title) {\r\n            show(message);\r\n            $log.info('Success: ' + message, data);\r\n        }\r\n\r\n        function warning(message, data, title) {\r\n            show(message);\r\n            $log.warn('Warning: ' + message, data);\r\n        }\r\n\r\n        function show(message) {\r\n            var toast = $mdToast\r\n                .simple()\r\n                .textContent(message)\r\n                .position('bottom right')\r\n                .hideDelay(2000);\r\n\r\n            var toastContainer = document.getElementById('toast-container');\r\n\r\n            if (toastContainer) {\r\n                toast.parent(toastContainer);\r\n            }\r\n\r\n            $mdToast.show(toast);\r\n        }\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('userService', userService);\r\n\r\n    userService.$inject = ['$q', 'httpService'];\r\n\r\n    function userService($q, httpService) {\r\n        this.getUser = function (username) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.get('users/' + username, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .run(appRun);\r\n\r\n    appRun.$inject = ['routerHelper'];\r\n\r\n    function appRun(routerHelper) {\r\n        routerHelper.configureStates(getStates(), '/');\r\n    }\r\n\r\n    function getStates() {\r\n        return [{\r\n            state: 'settings',\r\n            config: {\r\n                url: '/account/edit',\r\n                templateUrl: 'app/components/settings/settings.template.html',\r\n                controller: 'SettingsController',\r\n                controllerAs: 'vm',\r\n                title: 'Settings'\r\n            }\r\n        }];\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .controller('SettingsController', SettingsController);\r\n\r\n    SettingsController.$inject = ['Upload', 'accountService', 'userProvider', 'logger', 'environment'];\r\n\r\n    function SettingsController($upload, accountService, userProvider, logger, environment) {\r\n        var vm = this;\r\n\r\n        vm.changePassword = function () {\r\n            var account = {\r\n                oldPassword: vm.account.oldPassword,\r\n                newPassword: vm.account.newPassword\r\n            };\r\n\r\n            accountService.changePassword(account)\r\n                .then(function () {\r\n                    logger.toast('Password successfuly changed.');\r\n                }, function (error) {\r\n                    logger.toast(error);\r\n                });\r\n        };\r\n\r\n        vm.updateProfilePicture = function (attachment) {\r\n            var upload = {\r\n                url: environment.requestUri + 'attachments',\r\n                data: {\r\n                    file: attachment\r\n                }\r\n            };\r\n\r\n            vm.isUploading = true;\r\n\r\n            $upload.upload(upload)\r\n                .progress(function (e) {\r\n                    vm.progress = Math.round((e.loaded * 100.0) / e.total);\r\n                })\r\n                .success(function (data, status, headers, config) {\r\n                    var attachment = {\r\n                        pictureId: data.id\r\n                    };\r\n\r\n                    accountService.updateAccount(attachment)\r\n                        .then(function (response) {\r\n                            vm.account.pictureId = data.id;\r\n                            vm.account.pictureUri = data.uri;\r\n                            userProvider.update('pictureId', data.id);\r\n                            userProvider.update('pictureUri', data.uri);\r\n                            vm.isUploading = false;\r\n                        }, function (error) {\r\n                            vm.isUploading = false;\r\n                        });\r\n                })\r\n                .error(function (error, status, headers, config) {\r\n                    vm.isUploading = false;\r\n                    logger.toast(error);\r\n                });\r\n        };\r\n\r\n        vm.updateProfile = function () {\r\n            var account = {\r\n                username: vm.account.username,\r\n                fullName: vm.account.fullName,\r\n                bio: vm.account.bio,\r\n                email: vm.account.email\r\n            };\r\n\r\n            accountService.updateAccount(account)\r\n                .then(function (response) {\r\n                    vm.account.username = response.username;\r\n                    vm.account.fullName = response.fullName;\r\n                    vm.account.bio = response.bio;\r\n                    vm.account.email = response.email;\r\n\r\n                    userProvider.updateCurrentUser(response);\r\n                }, function (error) {});\r\n        };\r\n\r\n        vm.changeAccountPrivacy = function () {\r\n            var account = {\r\n                isPrivate: vm.account.isPrivate\r\n            };\r\n\r\n            accountService.updateAccount(account)\r\n                .then(function (response) {\r\n                    vm.account.isPrivate = response.isPrivate;\r\n                    userProvider.update('isPrivate', response.isPrivate);\r\n                }, function (error) {});\r\n        };\r\n\r\n        vm.invertAccountStatus = function () {\r\n            var account = {\r\n                isActive: !vm.account.isActive\r\n            };\r\n\r\n            accountService.updateAccount(account)\r\n                .then(function (response) {\r\n                    vm.account.isActive = response.isActive;\r\n                    userProvider.update('isActive', response.isActive);\r\n                    logger.toast('Account ' + (response.isActive ? 'activated' : 'deactivated'));\r\n                }, function (error) {});\r\n        };\r\n\r\n        vm.$onInit = function () {\r\n            accountService.getAccount()\r\n                .then(function (response) {\r\n                    vm.account = response;\r\n                }, function (error) {});\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .run(appRun);\r\n\r\n    appRun.$inject = ['routerHelper'];\r\n\r\n    function appRun(routerHelper) {\r\n        routerHelper.configureStates(getStates(), '/');\r\n    }\r\n\r\n    function getStates() {\r\n        var states = [];\r\n\r\n        states.push({\r\n            state: 'posts',\r\n            config: {\r\n                url: '/',\r\n                templateUrl: 'app/components/posts/feed/feed.template.html',\r\n                controller: 'FeedController',\r\n                controllerAs: 'vm',\r\n                title: 'Home'\r\n            }\r\n        });\r\n\r\n        states.push({\r\n            state: 'userposts',\r\n            config: {\r\n                url: '/:username',\r\n                templateUrl: 'app/components/posts/user-posts/user-posts.template.html',\r\n                controller: 'UserPostsController',\r\n                controllerAs: 'vm',\r\n                title: 'User'\r\n            }\r\n        });\r\n\r\n        states.push({\r\n            state: 'post',\r\n            config: {\r\n                url: '/p/:postId',\r\n                templateUrl: 'app/components/posts/post-details/post-details.template.html',\r\n                controller: 'PostDetailsController',\r\n                controllerAs: 'vm',\r\n                title: 'Post'\r\n            }\r\n        });\r\n\r\n        return states;\r\n    }\r\n})(angular);\r\n","(function () {\n    'use strict';\n\n    angular.module('photocloud')\n        .controller('IndexController', IndexController);\n\n    IndexController.$inject = ['$scope', 'userProvider'];\n\n    function IndexController($scope, userProvider) {\n        var vm = this;\n\n        vm.userProvider = userProvider;\n\n        $scope.$watch('vm.userProvider.currentUser', function (currentUser) {\n            vm.currentUser = currentUser;\n        });\n\n        vm.date = new Date();\n    }\n})();\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('accountService', accountService);\r\n\r\n    accountService.$inject = ['$q', 'httpService'];\r\n\r\n    function accountService($q, httpService) {\r\n        this.create = function (account) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.post('account', account, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.getAccount = function () {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.get('account', deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.signIn = function (account) {\r\n            var deferred = $q.defer();\r\n\r\n            var data = 'grant_type=password&username=' + account.username + '&password=' + account.password;\r\n            httpService.post('authorize', data, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.updateAccount = function (properties) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.patch('account', properties, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n\r\n        this.changePassword = function (password) {\r\n            var deferred = $q.defer();\r\n\r\n            httpService.put('account', password, deferred);\r\n\r\n            return deferred.promise;\r\n        };\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .run(appRun);\r\n\r\n    appRun.$inject = ['routerHelper'];\r\n\r\n    function appRun(routerHelper) {\r\n        routerHelper.configureStates(getStates());\r\n    }\r\n\r\n    function getStates() {\r\n        return [{\r\n            state: '404',\r\n            config: {\r\n                templateUrl: 'app/components/404/404.template.html',\r\n                title: 'Page Not Found'\r\n            }\r\n        }];\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .service('attachmentService', attachmentService);\r\n\r\n    attachmentService.$inject = ['environment', 'Upload'];\r\n\r\n    function attachmentService($upload) {\r\n        this.upload = function (environment, attachment) {\r\n            $upload.upload({\r\n                url: environment.requestUri + 'attachments',\r\n                data: {\r\n                    file: attachment\r\n                }\r\n            });\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .filter('dateAgo', date);\r\n\r\n    date.$inject = ['$filter'];\r\n\r\n    function date($filter) {\r\n        return function (postDate) {\r\n            var currentDate = new Date();\r\n\r\n            var msPerSecond = 1000;\r\n            var msPerMinute = 60 * 1000;\r\n            var msPerHour = msPerMinute * 60;\r\n            var msPerDay = msPerHour * 24;\r\n            var msPerWeek = msPerDay * 7;\r\n            var msPerMonth = msPerDay * 30;\r\n            var msPerYear = msPerDay * 365;\r\n\r\n            var parsed = Date.parse(postDate);\r\n            var date = new Date(parsed);\r\n            var elapsed = currentDate.getTime() - date.getTime();\r\n            var difference = null;\r\n\r\n            if (elapsed < msPerMinute) {\r\n                difference = Math.round(elapsed / msPerSecond);\r\n\r\n                if (difference > 1) {\r\n                    return difference + ' seconds ago';\r\n                } else {\r\n                    return difference + ' second ago';\r\n                }\r\n            } else if (elapsed < msPerHour) {\r\n                difference = Math.round(elapsed / msPerMinute);\r\n\r\n                if (difference > 1) {\r\n                    return difference + ' minutes ago';\r\n                } else {\r\n                    return difference + ' minute ago';\r\n                }\r\n            } else if (elapsed < msPerDay) {\r\n                difference = Math.round(elapsed / msPerHour);\r\n\r\n                if (difference > 1) {\r\n                    return difference + ' hours ago';\r\n                } else {\r\n                    return difference + ' hour ago';\r\n                }\r\n            } else if (elapsed < msPerWeek) {\r\n                difference = Math.round(elapsed / msPerDay);\r\n\r\n                if (difference > 1) {\r\n                    return difference + ' days ago';\r\n                } else {\r\n                    return difference + ' day ago';\r\n                }\r\n            } else if (elapsed < msPerMonth) {\r\n                difference = Math.round(elapsed / msPerWeek);\r\n\r\n                if (difference > 1) {\r\n                    return difference + ' weeks ago';\r\n                } else {\r\n                    return difference + ' week ago';\r\n                }\r\n            } else if (elapsed < msPerYear) {\r\n                difference = Math.round(elapsed / msPerMonth);\r\n\r\n                if (difference > 1) {\r\n                    return difference + ' monts ago';\r\n                } else {\r\n                    return difference + ' months ago';\r\n                }\r\n            } else {\r\n                difference = Math.round(elapsed / msPerYear);\r\n\r\n                if (difference > 1) {\r\n                    return difference + ' years ago';\r\n                } else {\r\n                    return difference + ' year ago';\r\n                }\r\n            }\r\n        };\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .filter('caption', caption);\r\n\r\n    caption.$inject = ['$filter', '$sce'];\r\n\r\n    function caption($filter, $sce) {\r\n        return function (text, target, type) {\r\n            if (!text) {\r\n                return text;\r\n            }\r\n\r\n            if (text.includes('#')) {\r\n                text = text.replace(/#(\\w+)/g, \"<a class='hashtag' href='/#/explore/tags/$1'>$&</a>\");\r\n            }\r\n\r\n            if (text.includes('@')) {\r\n                text = text.replace(/@(\\w+)/g, \"<a class='hashtag' href='/#/$1'>$&</a>\");\r\n            }\r\n\r\n            $sce.trustAsHtml(text);\r\n\r\n            return text;\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .directive('compareTo', compareTo);\r\n\r\n    function compareTo() {\r\n        return {\r\n            require: 'ngModel',\r\n            scope: {\r\n                otherModelValue: '=compareTo'\r\n            },\r\n            link: function (scope, element, attributes, ngModel) {\r\n                ngModel.$validators.compareTo = function (modelValue) {\r\n                    return modelValue == scope.otherModelValue;\r\n                };\r\n\r\n                scope.$watch('otherModelValue', function () {\r\n                    ngModel.$validate();\r\n                });\r\n            }\r\n        };\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .directive('alternativeUserImage', alternativeUserImage);\r\n\r\n    function alternativeUserImage() {\r\n        return {\r\n            restrict: 'A',\r\n            link: function (scope, element, attrs) {\r\n                attrs.$observe('ngSrc', function (ngSrc) {\r\n                    if (!ngSrc) {\r\n                        element.attr('src', 'assets/images/user.png');\r\n                    }\r\n                });\r\n            }\r\n        };\r\n    }\r\n})(angular);\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app.core')\r\n        .factory('environment', environment);\r\n\r\n    function environment() {\r\n        var requestUri = 'https://krypapp.azurewebsites.net/';\r\n\r\n        return {\r\n            requestUri: requestUri\r\n        };\r\n    }\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('app.core')\r\n        .config(configure);\r\n\r\n    configure.$inject = ['$logProvider', 'routerHelperProvider'];\r\n\r\n    function configure($logProvider, routerHelperProvider) {\r\n        if ($logProvider.debugEnabled) {\r\n            $logProvider.debugEnabled(true);\r\n        }\r\n\r\n        routerHelperProvider.configure({\r\n            docTitle: 'PhotoCloud :'\r\n        });\r\n    }\r\n})();\r\n","(function (angular) {\r\n    'use strict';\r\n\r\n    angular.module('app.core')\r\n        .constant('version', '1.0.0');\r\n})(angular);\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .run(run);\r\n\r\n    run.$inject = ['$rootScope', '$state', 'tokenProvider'];\r\n\r\n    function run($rootScope, $state, tokenProvider) {\r\n        $rootScope.$on('$stateChangeStart', stateChangeStart);\r\n\r\n        function stateChangeStart(event, next) {\r\n            var accessToken = tokenProvider.getAccessToken();\r\n\r\n            if (accessToken && accessToken.isValid) {\r\n                if (next.url !== '/account/edit' && !accessToken.isActive) {\r\n                    $state.go('settings', {\r\n                        isRedirected: true\r\n                    });\r\n                    event.preventDefault();\r\n                } else if (next.url === '/signin' || next.url === '/account/create') {\r\n                    $state.go('posts');\r\n                    event.preventDefault();\r\n                }\r\n            } else if (next.url !== '/signin' && next.url === '/') {\r\n                $state.go('signin');\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n})();\r\n","(function () {\r\n    'use strict';\r\n\r\n    angular.module('photocloud')\r\n        .config(configRoutes);\r\n\r\n    configRoutes.$inject = ['$httpProvider', '$mdThemingProvider'];\r\n\r\n    function configRoutes($httpProvider, $mdThemingProvider) {\r\n        $mdThemingProvider.theme('default')\r\n            .primaryPalette('blue');\r\n\r\n        $httpProvider.interceptors.push('httpInterceptor');\r\n    }\r\n})();\r\n","angular.module('photocloud').run(['$templateCache', function($templateCache) {$templateCache.put('app/components/404/404.template.html','<div class=\"content\">\\r\\n    <div layout=\"column\" layout-align=\"center center\">\\r\\n        <span class=\"md-headline\">Sorry, this page isn\\'t available.</span>\\r\\n        <p>The link you followed may be broken, or the page may have been removed. Go back to <a ui-sref=\"posts\">PhotoCloud</a>.</p>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/settings/1settings.template.html','<div class=\"content\" layout=\"row\" layout-align=\"center stretch\">\\r\\n    <div class=\"page-content\">\\r\\n        <div layout=\"row\">\\r\\n            <div class=\"md-padding\" layout=\"column\" layout-align=\"start center\">\\r\\n                <div layout=\"column\" layout-align=\"start start\">\\r\\n                    <md-tooltip md-direction=\"bottom\">Change picture</md-tooltip>\\r\\n                    <img class=\"thumbnail-big\" alternative-user-image ng-src=\"{{vm.account.pictureUri}}\" alt=\"profile\" md-whiteframe=\"3\" ngf-select=\"vm.updateProfilePicture($file)\" ngf-pattern=\"\\'image/*\\'\" ngf-accept=\"\\'image/*\\'\" ngf-max-size=\"20MB\">\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\"md-padding left\" layout=\"column\" flex>\\r\\n                <div class=\"md-padding bottom\" ng-if=\"!vm.account.isActive\">\\r\\n                    <span class=\"description warning\">Account has been deactivated. To view posts and edit settings you need to activate your account</span>\\r\\n                </div>\\r\\n                <div class=\"md-padding\" md-whiteframe=\"10\">\\r\\n                    <div class=\"row\">\\r\\n                        <span class=\"md-headline\">General Information</span>\\r\\n                    </div>\\r\\n                    <div layout=\"row\">\\r\\n                        <md-input-container class=\"md-block\" flex>\\r\\n                            <label class=\"md-subhead bold\" for=\"username\">Username</label>\\r\\n                            <input class=\"light\" type=\"text\" name=\"username\" ng-model=\"vm.account.username\" aria-label=\"settings\" ng-disabled=\"!vm.account.isActive\">\\r\\n                        </md-input-container>\\r\\n                        <md-input-container class=\"md-block\" flex>\\r\\n                            <label class=\"md-subhead bold\" for=\"fullName\">Full Name</label>\\r\\n                            <input class=\"light\" type=\"text\" name=\"fullName\" ng-model=\"vm.account.fullName\" aria-label=\"settings\" ng-disabled=\"!vm.account.isActive\">\\r\\n                        </md-input-container>\\r\\n                    </div>\\r\\n                    <md-input-container class=\"md-block\" flex>\\r\\n                        <label class=\"md-subhead bold\" for=\"bio\">Tell us something about yourself</label>\\r\\n                        <input class=\"light\" type=\"text\" name=\"bio\" ng-model=\"vm.account.bio\" aria-label=\"settings\" ng-disabled=\"!vm.account.isActive\">\\r\\n                    </md-input-container>\\r\\n                </div>\\r\\n                <div class=\"md-padding\" style=\"margin-top: 50px\" md-whiteframe=\"10\">\\r\\n                    <div class=\"row\">\\r\\n                        <span class=\"md-headline\">Private Information</span>\\r\\n                    </div>\\r\\n                    <md-input-container class=\"md-block\" flex>\\r\\n                        <label class=\"md-subhead bold\" for=\"email\">Email Address</label>\\r\\n                        <input class=\"light\" type=\"text\" name=\"email\" placeholder=\"username@example.com\" ng-model=\"vm.account.email\" aria-label=\"settings\" ng-disabled=\"!vm.account.isActive\">\\r\\n                    </md-input-container>\\r\\n                    <md-input-container class=\"md-block\" flex>\\r\\n                        <label class=\"md-subhead bold\" for=\"oldPassword\">Old Password</label>\\r\\n                        <input class=\"light\" type=\"password\" name=\"oldPassword\" ng-change=\"vm.passwordChanged()\" ng-model=\"vm.password.oldPassword\" aria-label=\"settings\" ng-disabled=\"!vm.account.isActive\">\\r\\n                    </md-input-container>\\r\\n                    <md-input-container class=\"md-block\" flex>\\r\\n                        <label class=\"md-subhead bold\" for=\"newPassword\">New Password</label>\\r\\n                        <input class=\"light\" type=\"password\" name=\"newPassword\" ng-change=\"vm.passwordChanged()\" ng-model=\"vm.password.newPassword\" aria-label=\"settings\" ng-disabled=\"!vm.account.isActive\">\\r\\n                    </md-input-container>\\r\\n                    <md-input-container class=\"md-block\" flex>\\r\\n                        <label class=\"md-subhead bold\" for=\"confirmPassword\">Confirm Password</label>\\r\\n                        <input class=\"light\" type=\"password\" name=\"confirmPassword\" ng-change=\"vm.passwordChanged()\" ng-model=\"vm.password.confirmPassword\" aria-label=\"settings\" ng-disabled=\"!vm.account.isActive\">\\r\\n                    </md-input-container>\\r\\n                    <p class=\"description danger\" ng-if=\"vm.password.error\">{{vm.password.error}}</p>\\r\\n                    <p class=\"description\">Password length should be at least 6 symbols</p>\\r\\n                </div>\\r\\n                <div class=\"md-padding top\">\\r\\n                    <label class=\"md-subhead bold\">Privacy</label>\\r\\n                    <md-switch ng-change=\"vm.changePrivacy()\" ng-model=\"vm.account.isPrivate\" aria-label=\"Is Private\" ng-disabled=\"!vm.account.isActive\">\\r\\n                    </md-switch>\\r\\n                    <p class=\"description\">When your account is private, only people you approve can see you photos and videos on PhotoCloud. The\\r\\n                        existing followers won\\'t be affected</p>\\r\\n                </div>\\r\\n                <div class=\"md-padding top\">\\r\\n                    <md-button class=\"md-raised\" ng-click=\"vm.invertAccountStatus()\">\\r\\n                        {{vm.account.isActive}} account\\r\\n                    </md-button>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/settings/settings.template.html','<div class=\"content\" layout=\"row\" layout-align=\"center start\">\\r\\n    <div class=\"page-content\" layout=\"row\" md-whiteframe=\"1\">\\r\\n        <div class=\"md-padding\">\\r\\n            <img ng-src=\"{{vm.account.pictureUri}}\" alternative-user-image style=\"border-radius: 100px; width: 190px; height: 190px; object-fit: cover\">\\r\\n            <div class=\"md-padding top\" layout=\"row\" layout-align=\"center center\">\\r\\n                <md-button class=\"md-raised md-primary\" ngf-select=\"vm.updateProfilePicture($file)\" ngf-pattern=\"\\'image/*\\'\" ngf-accept=\"\\'image/*\\'\" ngf-max-size=\"20MB\" ng-disabled=\"vm.isUploading\">Change Picture</md-button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\"md-padding md-block\" layout=\"column\" layout-align=\"start start\">\\r\\n            <div class=\"md-padding bottom\">\\r\\n                <span class=\"md-subhead\">General Information</span>\\r\\n            </div>\\r\\n            <md-input-container class=\"md-block\">\\r\\n                <label for=\"username\">Username</label>\\r\\n                <input name=\"username\" type=\"text\" ng-model=\"vm.account.username\">\\r\\n            </md-input-container>\\r\\n            <md-input-container class=\"md-block\">\\r\\n                <label for=\"fullName\">Full Name</label>\\r\\n                <input name=\"fullName\" type=\"text\" ng-model=\"vm.account.fullName\">\\r\\n            </md-input-container>\\r\\n            <md-input-container class=\"md-block\">\\r\\n                <label for=\"bio\">Bio</label>\\r\\n                <input name=\"bio\" type=\"text\" ng-model=\"vm.account.bio\">\\r\\n            </md-input-container>\\r\\n            <md-input-container class=\"md-block\">\\r\\n                <label for=\"email\">Email Address</label>\\r\\n                <input name=\"email\" type=\"email\" ng-model=\"vm.account.email\">\\r\\n            </md-input-container>\\r\\n            <div layout=\"row\" layout-align=\"end center\">\\r\\n                <md-button class=\"md-raised md-primary\" ng-click=\"vm.updateProfile()\">Save profile changes</md-button>\\r\\n            </div>\\r\\n            <div class=\"md-padding bottom\">\\r\\n                <span class=\"md-subhead\">Change Password</span>\\r\\n            </div>\\r\\n            <md-input-container class=\"md-block\">\\r\\n                <label for=\"oldPassword\">Old Password</label>\\r\\n                <input name=\"oldPassword\" type=\"text\">\\r\\n            </md-input-container>\\r\\n            <md-input-container class=\"md-block\">\\r\\n                <label for=\"newPassword\">New Password</label>\\r\\n                <input name=\"newPassword\" type=\"text\">\\r\\n            </md-input-container>\\r\\n            <md-input-container class=\"md-block\">\\r\\n                <label for=\"confirmPassword\">Confirm Password</label>\\r\\n                <input name=\"confirmPassword\" type=\"text\">\\r\\n            </md-input-container>\\r\\n            <div layout=\"row\" layout-align=\"end center\">\\r\\n                <md-button class=\"md-raised md-primary\">Change password</md-button>\\r\\n            </div>\\r\\n            <div class=\"md-padding top\">\\r\\n                <label class=\"md-subhead bold\">Privacy</label>\\r\\n                <md-switch ng-change=\"vm.changeAccountPrivacy()\" ng-model=\"vm.account.isPrivate\" aria-label=\"Is Private\" ng-disabled=\"!vm.account.isActive\">\\r\\n                </md-switch>\\r\\n                <p class=\"description\">When your account is private, only people you approve can see you photos and videos on PhotoCloud. The existing\\r\\n                    followers won\\'t be affected</p>\\r\\n            </div>\\r\\n            <div layout=\"row\" layout-align=\"center center\">\\r\\n                <md-button class=\"md-raised md-warn\" ng-click=\"vm.invertAccountStatus()\">{{vm.account.isActive ? \\'Deactivate\\' : \\'Activate\\'}} Account\\r\\n                </md-button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/account/create/create-account.template.html','<div class=\"content\" layout=\"column\" layout-align=\"center center\">\\r\\n    <div class=\"auth-form\" md-whiteframe=\"1\">\\r\\n        <div class=\"box-header\">\\r\\n            <md-progress-linear md-mode=\"indeterminate\" ng-if=\"vm.isLoading\"></md-progress-linear>\\r\\n            <div class=\"md-padding left\">\\r\\n                <h2>Create account</h2>\\r\\n                <span class=\"description\">One account is all you need</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        <form name=\"signUpForm\" class=\"box-content\" ng-submit=\"vm.create(vm.account)\">\\r\\n            <div class=\"md-padding\">\\r\\n                <md-input-container class=\"md-block\" flex>\\r\\n                    <md-icon>account_circle</md-icon>\\r\\n                    <input name=\"username\" required type=\"text\" placeholder=\"Username\" ng-model=\"vm.account.username\" aria-label=\"account\">\\r\\n                    <div ng-messages=\"signUpForm.username.$error\" role=\"alert\">\\r\\n                        <div ng-message=\"required\">\\r\\n                            Username must not be empty\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </md-input-container>\\r\\n                <md-input-container class=\"md-block\" flex>\\r\\n                    <md-icon>email</md-icon>\\r\\n                    <input name=\"email\" required type=\"email\" placeholder=\"E-mail address\" ng-model=\"vm.account.email\" aria-label=\"account\">\\r\\n                    <div ng-messages=\"signUpForm.email.$error\" role=\"alert\">\\r\\n                        <div ng-message=\"required\">\\r\\n                            Email address must not be empty\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </md-input-container>\\r\\n                <md-input-container class=\"md-block\" flex>\\r\\n                    <md-icon>lock</md-icon>\\r\\n                    <input name=\"password\" required type=\"password\" placeholder=\"Password\" ng-model=\"vm.account.password\" minlength=\"6\" aria-label=\"account\">\\r\\n                    <div ng-messages=\"signUpForm.email.$error\" role=\"alert\">\\r\\n                        <div ng-message=\"minlength\">\\r\\n                            Password length should be at least 6 symbols\\r\\n                        </div>\\r\\n                        <div ng-message=\"required\">\\r\\n                            Password must not be empty\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </md-input-container>\\r\\n                <md-input-container class=\"md-block\" flex>\\r\\n                    <md-icon>lock</md-icon>\\r\\n                    <input name=\"confirmPassword\" required type=\"password\" placeholder=\"Confirm password\" ng-model=\"vm.account.confirmPassword\" minlength=\"6\" aria-label=\"account\" compare-to=\"vm.account.password\">\\r\\n                    <div ng-messages=\"signUpForm.confirmPassword.$error\" role=\"alert\">\\r\\n                        <div ng-message=\"compareTo\">Confirm password does not match password</div>\\r\\n                    </div>\\r\\n                </md-input-container>\\r\\n                <div layout=\"row\" layout-align=\"end center\">\\r\\n                    <md-button class=\"md-raised md-primary md-block\" type=\"submit\" ng-disabled=\"vm.isLoading\">\\r\\n                        {{ vm.isLoading ? \\'Loading\\' : \\'Create Account\\' }}\\r\\n                    </md-button>\\r\\n                </div>\\r\\n                <div layout=\"column\" layout-align=\"center center\">\\r\\n                    <div class=\"error\" ng-if=\"vm.errors.length > 0\">\\r\\n                        <p ng-repeat=\"error in vm.errors\">{{error}}</p>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/posts/comments/comments.template.html','');\n$templateCache.put('app/components/account/signin/signin.template.html','<div class=\"content\" layout=\"column\" layout-align=\"center center\">\\r\\n    <div class=\"auth-form\" md-whiteframe=\"1\">\\r\\n        <div class=\"box-header\">\\r\\n            <md-progress-linear md-mode=\"indeterminate\" ng-if=\"vm.isLoading\"></md-progress-linear>\\r\\n            <div class=\"md-padding left\">\\r\\n                <h2>Sign In</h2>\\r\\n                <span class=\"description\">to continue to PhotoCloud</span>\\r\\n            </div>\\r\\n        </div>\\r\\n        <form name=\"signInForm\" class=\"box-content\" ng-submit=\"vm.signIn(vm.account)\">\\r\\n            <div class=\"md-padding\">\\r\\n                <md-input-container class=\"md-block\" flex>\\r\\n                    <input name=\"username\" required type=\"text\" placeholder=\"Username\" ng-model=\"vm.account.username\" aria-label=\"account\" ng-disabled=\"vm.isLoading\">\\r\\n                    <div ng-messages=\"signInForm.username.$error\" role=\"alert\">\\r\\n                        <div ng-message=\"required\">\\r\\n                            Username must not be empty\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </md-input-container>\\r\\n                <md-input-container class=\"md-block\" flex>\\r\\n                    <input name=\"password\" required minlength=\"6\" type=\"password\" placeholder=\"Password\" ng-model=\"vm.account.password\" aria-label=\"account\" ng-disabled=\"vm.isLoading\">\\r\\n                    <div ng-messages=\"signInForm.password.$error\" role=\"alert\">\\r\\n                        <div ng-message=\"minlength\">\\r\\n                            Password length should be at least 6 symbols\\r\\n                        </div>\\r\\n                        <div ng-message=\"required\">\\r\\n                            Password must not be empty\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </md-input-container>\\r\\n                <div layout=\"row\" layout-align=\"space-between center\">\\r\\n                    <div class=\"md-padding top\">\\r\\n                        <md-checkbox ng-model=\"vm.account.remember\">Remember me?</md-checkbox>\\r\\n                    </div>\\r\\n                    <md-button class=\"md-raised md-primary\" type=\"submit\" ng-disabled=\"vm.isLoading\">\\r\\n                        {{ vm.isLoading ? \\'Loading\\' : \\'Sign In\\' }}\\r\\n                    </md-button>\\r\\n                </div>\\r\\n                <div layout=\"column\" layout-align=\"center center\">\\r\\n                    <div class=\"md-padding error\" ng-if=\"vm.error\">\\r\\n                        <span>{{vm.error}}</span>\\r\\n                    </div>\\r\\n                    <div class=\"md-block md-padding top\">\\r\\n                        <md-divider class=\"md-block md-padding top\"></md-divider>\\r\\n                    </div>\\r\\n                    <div class=\"md-padding\">\\r\\n                        <!--<span class=\"md-padding right\">Have no account?</span><a ui-sref=\"signup\">Sign up for free</a>-->\\r\\n                        <span class=\"md-padding right\">Have no account?</span>\\r\\n                        <md-button class=\"md-primary\" ui-sref=\"signup\">Sign up for free</md-button>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/posts/errors/error-box.template.html','<div class=\"error-box\" layout=\"column\" layout-align=\"center center\">\\r\\n        <span class=\"md-subhead\">\\r\\n            <strong>{{vm.error.title}}</strong>\\r\\n        </span>\\r\\n    <p ng-if=\"vm.error.details\">{{vm.error.details}}</p>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/posts/feed/feed.template.html','<div class=\"content\" layout=\"column\" layout-align=\"center center\" ng-if=\"vm.isPageLoading\">\\r\\n    <md-progress-circular md-mode=\"indeterminate\" md-diameter=\"40\"></md-progress-circular>\\r\\n</div>\\r\\n<div class=\"content\" layout=\"column\" layout-align=\"start center\" ng-if=\"!vm.isPageLoading\">\\r\\n    <post class=\"post\" remove-callback=\"vm.removePost($index)\" ng-repeat=\"post in vm.data.posts\" post=\"post\" ng-if=\"!vm.isPageLoading\"></post>\\r\\n    <div class=\"md-padding\" ng-if=\"vm.data.hasMoreItems\">\\r\\n        <md-button class=\"md-fab\" ng-click=\"vm.getPosts()\">\\r\\n            <md-tooltip md-direction=\"left\">Load more posts</md-tooltip>\\r\\n            <md-icon>expand_more</md-icon>\\r\\n        </md-button>\\r\\n        <div class=\"md-circle-container\" ng-if=\"vm.isLoading\">\\r\\n            <md-progress-circular class=\"md-accent\" md-mode=\"indeterminate\" md-diameter=\"40\"></md-progress-circular>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<md-fab-speed-dial class=\"md-fab-bottom-right\" ng-click=\"vm.createPost($event)\">\\r\\n    <md-fab-trigger>\\r\\n        <md-button class=\"md-fab\" aria-label=\"Preate Post\">\\r\\n            <md-tooltip md-direction=\"left\">Create post</md-tooltip>\\r\\n            <md-icon>photo_camera</md-icon>\\r\\n        </md-button>\\r\\n    </md-fab-trigger>\\r\\n</md-fab-speed-dial>\\r\\n');\n$templateCache.put('app/components/posts/create/create-post.template.html','<md-dialog class=\"upload-post-dialog\">\\r\\n    <md-dialog-content class=\"post-upload-content\" layout=\"column\" layout-align=\"center center\" ng-if=\"vm.post.attachments.length === 0\">\\r\\n        <div layout=\"column\" layout-align=\"center center\">\\r\\n            <md-button class=\"box\" layout=\"column\" layout-align=\"center center\" ngf-select=\"vm.upload($file)\" ngf-pattern=\"\\'image/*\\'\" ngf-accept=\"\\'image/*\\'\" ngf-max-size=\"20MB\">\\r\\n                <md-icon class=\"big\">cloud_upload</md-icon>\\r\\n                <span>Drag an image here or\\r\\n                    <a class=\"md-primary\">browse</a> for image for upload.</span>\\r\\n            </md-button>\\r\\n            <div class=\"md-block md-padding\" ng-if=\"vm.isUploading\">\\r\\n                <md-progress-linear md-mode=\"indeterminate\"></md-progress-linear>\\r\\n            </div>\\r\\n        </div>\\r\\n    </md-dialog-content>\\r\\n    <md-dialog-content class=\"post-upload-content\" layout=\"row\" layout-align=\"space-between start\" ng-if=\"vm.post.attachments.length > 0\">\\r\\n        <div class=\"md-attachment-list\" layout=\"column\" layout-align=\"start start\">\\r\\n            <div class=\"md-attachment-thumbnail-container\" ng-repeat=\"attachment in vm.post.attachments\" ng-click=\"vm.setPreview(attachment)\" md-whiteframe=\"3\">\\r\\n                <img class=\"md-attachment-thumbnail\" ng-src=\"{{attachment.uri}}\" alt=\"img\">\\r\\n            </div>\\r\\n            <div class=\"md-attachment-thumbnail-container\" md-whiteframe=\"3\">\\r\\n                <md-button class=\"md-attachment-button\" layout=\"row\" layout-align=\"center center\" ngf-select=\"vm.upload($file)\" ngf-pattern=\"\\'image/*\\'\" ngf-accept=\"\\'image/*\\'\" ngf-max-size=\"20MB\">\\r\\n                    <md-icon>add</md-icon>\\r\\n                </md-button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\"md-attachment-preview-container\" layout=\"column\" layout-align=\"start start\">\\r\\n            <img class=\"md-attachment-preview-thumbnail\" ng-src=\"{{vm.post.preview}}\" alt=\"preview\" md-whiteframe=\"1\">\\r\\n            <div class=\"md-block md-padding top\">\\r\\n                <md-input-container class=\"light-container\" md-no-float>\\r\\n                    <textarea class=\"md-input-light\" type=\"text\" ng-model=\"vm.post.caption\" placeholder=\"Edit caption\"></textarea>\\r\\n                </md-input-container>\\r\\n            </div>\\r\\n        </div>\\r\\n    </md-dialog-content>\\r\\n    <md-dialog-actions layout=\"column\" ng-if=\"vm.post.attachments && vm.post.attachments.length > 0\">\\r\\n        <md-button class=\"md-raised md-warn md-submit md-block\" ng-click=\"vm.createPost()\">Create post</md-button>\\r\\n    </md-dialog-actions>\\r\\n</md-dialog>\\r\\n');\n$templateCache.put('app/components/posts/post/post.template.html','<div class=\"md-ink-ripple\" md-whiteframe=\"1\">\\r\\n    <div class=\"post-header\" layout=\"row\" flex>\\r\\n        <img class=\"thumbnail-small\" alternative-user-image ui-sref=\"userposts({username: vm.post.user.username})\" ng-src=\"{{vm.post.user.pictureUri}}\" alt=\"profile\">\\r\\n        <div class=\"md-padding left\" layout=\"row\" layout-align=\"space-between center\" flex>\\r\\n            <a class=\"md-body-2\" ui-sref=\"userposts({username: vm.post.user.username})\">{{vm.post.user.username}}</a>\\r\\n            <md-menu md-position-mode=\"target-right target\">\\r\\n                <md-button class=\"md-icon-button\" ng-click=\"$mdMenu.open($event)\">\\r\\n                    <md-icon>expand_more</md-icon>\\r\\n                </md-button>\\r\\n                <md-menu-content width=\"3\">\\r\\n                    <md-menu-item>\\r\\n                        <md-button>\\r\\n                            <md-icon>edit</md-icon>\\r\\n                            Edit\\r\\n                        </md-button>\\r\\n                    </md-menu-item>\\r\\n                    <md-menu-item>\\r\\n                        <md-button ng-click=\"vm.removeCallback()\" ng-if=\"vm.post.user.id === vm.currentUser.userId\">\\r\\n                            <md-icon>close</md-icon>\\r\\n                            Remove\\r\\n                        </md-button>\\r\\n                    </md-menu-item>\\r\\n                </md-menu-content>\\r\\n            </md-menu>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\"post-content\" md-ink-ripple>\\r\\n        <div class=\"post-content-buttons\" layout=\"row\" layout-align=\"space-between center\" ng-if=\"vm.post.attachments.length > 1\">\\r\\n            <div>\\r\\n                <md-button class=\"md-icon-button md-raised\" ng-click=\"vm.previous()\" ng-if=\"vm.post.activeAttachment > 0\">\\r\\n                    <md-icon class=\"post-icon\">chevron_left</md-icon>\\r\\n                </md-button>\\r\\n            </div>\\r\\n            <div>\\r\\n                <md-button class=\"md-icon-button md-raised\" ng-click=\"vm.next()\" ng-if=\"vm.post.activeAttachment != vm.post.attachments.length - 1\">\\r\\n                    <md-icon class=\"post-icon\">chevron_right</md-icon>\\r\\n                </md-button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <img class=\"post-image\" ng-src=\"{{vm.post.attachments[vm.post.activeAttachment].uri}}\" alt=\"post-image\">\\r\\n    </div>\\r\\n    <div class=\"post-details\">\\r\\n        <div layout=\"row\" layout-align=\"space-between center\">\\r\\n            <span class=\"md-subhead\"><strong>{{vm.post.likesCount}} likes</strong></span>\\r\\n            <div layout=\"row\" ng-if=\"vm.post.attachments.length > 1\">\\r\\n                <md-icon class=\"post-badge\" ng-repeat=\"attachment in vm.post.attachments\" ng-class=\"{ \\'active\\' : vm.post.activeAttachment === $index }\">lens</md-icon>\\r\\n            </div>\\r\\n        </div>\\r\\n        <a class=\"md-body-2 post-link\" ui-sref=\"userposts({username: vm.post.user.username})\"><strong>{{vm.post.user.username}}</strong></a>\\r\\n        <span>{{vm.post.caption}}</span>\\r\\n        <div class=\"post-comments\">\\r\\n            <div class=\"comment\" ng-repeat=\"comment in vm.post.comments\">\\r\\n                <a class=\"md-body-2 post-link\" ui-sref=\"userposts({username: comment.user.username})\"><strong>{{comment.user.username}}</strong></a>\\r\\n                <span>{{comment.text}}</span>\\r\\n            </div>\\r\\n            <a class=\"md-body-2 description\" href=\"#\"><strong>View all 100 comments</strong></a>\\r\\n        </div>\\r\\n        <div>\\r\\n            <span class=\"md-body-2 description\">{{vm.post.created | dateAgo}}</span>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\"md-padding wide\">\\r\\n        <md-divider class=\"md-block\"></md-divider>\\r\\n    </div>\\r\\n    <div class=\"post-footer\">\\r\\n        <md-button class=\"md-icon-button\" ng-click=\"vm.like()\">\\r\\n            <md-icon ng-class=\"{ \\'danger\\' : vm.post.userHasLiked }\">favorite_border</md-icon>\\r\\n        </md-button>\\r\\n        <md-input-container class=\"light-container md-no-spacer\" md-no-float>\\r\\n            <input class=\"md-input-light\" type=\"text\" placeholder=\"Add comment\">\\r\\n        </md-input-container>\\r\\n        <md-button class=\"md-icon-button\" ng-click=\"vm.share()\">\\r\\n            <md-tooltip md-direction=\"left\">Copy to clipboard</md-tooltip>\\r\\n            <md-icon>share</md-icon>\\r\\n        </md-button>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/posts/post-details/post-details.template.html','<div class=\"content\" layout=\"row\" layout-align=\"center start\">\\r\\n    <div class=\"post-content\" layout=\"row\" layout-align=\"center start\" ng-if=\"vm.post.attachments.length > 0\">\\r\\n        <div class=\"post-content-buttons fixed\" layout=\"row\" layout-align=\"space-between center\" ng-if=\"vm.post.attachments.length > 1\">\\r\\n            <div>\\r\\n                <md-button class=\"md-icon-button md-raised\" ng-click=\"vm.previous()\" ng-if=\"vm.post.activeAttachment > 0\">\\r\\n                    <md-icon class=\"post-icon\">chevron_left</md-icon>\\r\\n                </md-button>\\r\\n            </div>\\r\\n            <div>\\r\\n                <md-button class=\"md-icon-button md-raised\" ng-click=\"vm.next()\" ng-if=\"vm.post.activeAttachment != vm.post.attachments.length - 1\">\\r\\n                    <md-icon class=\"post-icon\">chevron_right</md-icon>\\r\\n                </md-button>\\r\\n            </div>\\r\\n        </div>\\r\\n        <img ng-src=\"{{vm.post.attachments[vm.post.activeAttachment].uri}}\" alt=\"attachment\">\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/posts/user-posts/user-posts.template.html','<div class=\"content\" layout=\"column\" layout-align=\"start center\">\\r\\n    <div class=\"user-info\" layout=\"row\" layout-align=\"center start\" ng-if=\"vm.loaded\">\\r\\n        <img class=\"thumbnail-big\" alternative-user-image ng-src=\"{{vm.user.pictureUri}}\" alt=\"profile\" md-whiteframe=\"3\">\\r\\n        <div class=\"md-padding\" layout=\"column\" layout-align=\"stretch stretch\" flex>\\r\\n            <div layout=\"row\" layout-align=\"space-between center\">\\r\\n                <span class=\"md-display-1\">{{vm.user.username}}</span>\\r\\n                <a ui-sref=\"settings\" ng-if=\"vm.currentUser.userId === vm.user.id\">\\r\\n                    <md-tooltip md-direction=\"left\">Go to settings</md-tooltip>\\r\\n                    <md-icon>settings</md-icon>\\r\\n                </a>\\r\\n                <a ng-if=\"vm.currentUser.userId === vm.user.id\" ng-click=\"vm.logout()\">\\r\\n                    <md-tooltip md-direction=\"left\">Logout</md-tooltip>\\r\\n                    <md-icon>exit_to_app</md-icon>\\r\\n                </a>\\r\\n            </div>\\r\\n            <div class=\"md-padding top counters\" layout=\"row\" layout-align=\"start center\" ng-if=\"vm.user.isActive\">\\r\\n                <div flex=\"20\">\\r\\n                    <span class=\"md-title\">{{vm.user.posts}} </span>\\r\\n                    <span class=\"md-subhead\">posts </span>\\r\\n                </div>\\r\\n                <div flex=\"20\">\\r\\n                    <span class=\"md-title\">{{vm.user.followers}} </span>\\r\\n                    <span class=\"md-subhead\">followers </span>\\r\\n                </div>\\r\\n                <div flex=\"20\">\\r\\n                    <span class=\"md-title\">{{vm.user.following}} </span>\\r\\n                    <span class=\"md-subhead\">following</span>\\r\\n                </div>\\r\\n            </div>\\r\\n            <div class=\"md-padding top\" layout=\"row\" layout-align=\"start center\">\\r\\n                <span class=\"md-subhead\" style=\"font-size: 17px;font-weight: bold;padding-right: 10px\">{{vm.user.fullName}}</span>\\r\\n                <span class=\"md-subhead\" style=\"font-size: 17px;font-weight: normal;padding-right: 10px\">{{vm.user.bio}}</span>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\"container\" layout=\"row\" layout-align=\"center center\" ng-if=\"vm.error\" flex>\\r\\n        <error-box error=\"vm.error\"></error-box>\\r\\n    </div>\\r\\n    <div class=\"container\" layout=\"column\" layout-align=\"start center\" ng-if=\"!vm.error\">\\r\\n        <div class=\"user-posts\">\\r\\n            <div class=\"post-item\" ng-repeat=\"post in vm.data.posts\">\\r\\n                <div class=\"image-container\" layout=\"column\" layout-align=\"center center\" md-whiteframe=\"3\">\\r\\n                    <img class=\"thumbnail\" ng-src=\"{{post.attachments[0].uri}}\" alt=\"{{post.attachments[0].uri}}\">\\r\\n                    <div class=\"after md-padding\" layout=\"row\" layout-align=\"space-between center\">\\r\\n                        <div layout=\"row\" layout-align=\"center center\">\\r\\n                            <md-icon class=\"post-icon\">favorite</md-icon>\\r\\n                            <span class=\"post-number\">{{post.likesCount}}</span>\\r\\n                        </div>\\r\\n                        <div layout=\"row\" layout-align=\"center center\">\\r\\n                            <md-icon class=\"post-icon\">mode_comment</md-icon>\\r\\n                            <span class=\"post-number\">{{post.commentsCount}}</span>\\r\\n                        </div>\\r\\n                    </div>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div ng-if=\"vm.data.hasMoreItems\">\\r\\n            <md-button class=\"md-fab\" ng-click=\"vm.getPosts()\" ng-if=\"!vm.isLoading\">\\r\\n                <md-tooltip md-direction=\"left\">Load more posts</md-tooltip>\\r\\n                <md-icon>expand_more</md-icon>\\r\\n            </md-button>\\r\\n            <div class=\"md-circle-container\" ng-if=\"vm.isLoading\">\\r\\n                <md-progress-circular class=\"md-accent\" md-mode=\"indeterminate\" md-diameter=\"40\"></md-progress-circular>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/layout/widgets/userbar/user-bar.template.html','<div layout=\"row\" layout-align=\"center center\" ng-if=\"!vm.currentUser.isAuthenticated\">\\r\\n    <md-button ui-sref=\"signup\">Create Account</md-button>\\r\\n    <md-button class=\"md-primary md-raised\" ui-sref=\"signin\">Sign In</md-button>\\r\\n</div>\\r\\n<div layout=\"row\" layout-align=\"center center\" ng-if=\"vm.currentUser.isAuthenticated\">\\r\\n    <img class=\"thumbnail-small\" alternative-user-image ui-sref=\"userposts({username: vm.currentUser.username})\" ng-src=\"{{vm.currentUser.pictureUri}}\" alt=\"user\">\\r\\n</div>\\r\\n');\n$templateCache.put('app/components/layout/widgets/search/search.template.html','<md-autocomplete placeholder=\"Search\" md-no-cache=\"vm.noCache\" md-selected-item=\"vm.selectedItem\" md-selected-item-change=\"vm.selectedItemChange(vm.selectedItem)\" md-search-text=\"vm.query\" md-items=\"item in vm.search(vm.query)\" md-item-text=\"item.username\">\\r\\n    <md-item-template>\\r\\n        <div layout=\"row\" layout-align=\"start center\">\\r\\n            <img class=\"thumbnail-small\" ng-src=\"{{item.pictureUri}}\" alternative-user-image alt=\"profile image\">\\r\\n            <span class=\"md-padding left\">{{item.username}}</span>\\r\\n        </div>\\r\\n    </md-item-template>\\r\\n    <md-not-found>\\r\\n        <span>There are no matches</span>\\r\\n    </md-not-found>\\r\\n</md-autocomplete>\\r\\n');}]);"]}